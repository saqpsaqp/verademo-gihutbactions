name: Veracode Security Scan

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Permite ejecutar el workflow manualmente desde la interfaz de GitHub

jobs:
  analyze:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven

    - name: Build with Maven
      run: mvn -B package --file pom.xml
      
    - name: Veracode Upload and Scan
      uses: veracode/veracode-uploadandscan-action@master
      with:
        appname: 'Verademo SAQPSAQP'
        createprofile: true
        filepath: 'target/verademo.war'
        vid: '${{ vars.VERACODE_API_ID }}'
        vkey: '${{ vars.VERACODE_API_KEY }}'
        scanpollinginterval: 30
        scantimeout: 20

    # Opcionalmente, puedes agregar la acción para la integración de GitHub Issues
    - name: Veracode Workflow GitHub Action
      uses: veracode/veracode-workflow-github-action@v1
      with:
        appname: 'Verademo'
        vid: '${{ vars.VERACODE_API_ID }}'
        vkey: '${{ vars.VERACODE_API_KEY }}'

    # Otra opción es usar el Pipeline Scan que mencionaste en el README
    - name: Veracode Pipeline Scan
      uses: veracode/veracode-pipeline-scan-action@master
      with:
        vid: '${{ vars.VERACODE_API_ID }}'
        vkey: '${{ vars.VERACODE_API_KEY }}'
        file: 'target/verademo.war'
        fail_build: false  # Cambiar a true si quieres que el CI falle cuando encuentra vulnerabilidades
        baseline_file: 'docs/scan_results/results.json'  # Usa el baseline que ya tienes